<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pomelo.EntityFrameworkCore.MySql</name>
    </assembly>
    <members>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> for SQL Server-specific metadata.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.IsFullText(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns a value indicating whether the index is full text.
            </summary>
            <param name="index"> The index. </param>
            <returns> <c>true</c> if the index is full text. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.SetIsFullText(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the index is full text.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.SetIsFullText(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the index is full text.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.GetIsFullTextConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is full text.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is full text. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.PrefixLength(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns prefix lengths for the index.
            </summary>
            <param name="index"> The index. </param>
            <returns> The prefix lengths.
            A value of `0` indicates, that the full length should be used for that column. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Int32[])">
            <summary>
                Sets prefix lengths for the index.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="index"> The index. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Int32[],System.Boolean)">
            <summary>
                Sets prefix lengths for the index.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="index"> The index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.GetPrefixLengthConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the index.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the index. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.IsSpatial(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns a value indicating whether the index is spartial.
            </summary>
            <param name="index"> The index. </param>
            <returns> <c>true</c> if the index is spartial. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.SetIsSpatial(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the index is spartial.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.SetIsSpatial(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the index is spartial.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlIndexExtensions.GetIsSpatialConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is spartial.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is spartial. </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlKeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> for SQL Server-specific metadata.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlKeyExtensions.PrefixLength(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                Returns prefix lengths for the key.
            </summary>
            <param name="key"> The key. </param>
            <returns> The prefix lengths.
            A value of `0` indicates, that the full length should be used for that column. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlKeyExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IMutableKey,System.Int32[])">
            <summary>
                Sets prefix lengths for the key.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="key"> The key. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlKeyExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Int32[],System.Boolean)">
            <summary>
                Sets prefix lengths for the key.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="key"> The key. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlKeyExtensions.GetPrefixLengthConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionKey)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the key.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the key. </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlMigrationBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder" />.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlMigrationBuilderExtensions.IsMySql(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
                <para>
                    Returns true if the database provider currently in use is the SQL Server provider.
                </para>
            </summary>
            <param name="migrationBuilder"> The migrationBuilder from the parameters on <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" /> or <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" />. </param>
            <returns> True if SQL Server is being used; false otherwise. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlModelExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for properties
                of keys in the model, unless the property has a strategy explicitly set.
            </summary>
            <param name="model"> The model. </param>
            <returns> The default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlModelExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy})">
            <summary>
                Attempts to set the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for properties
                of keys in the model that don't have a strategy explicitly set.
            </summary>
            <param name="model"> The model. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlModelExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy},System.Boolean)">
            <summary>
                Attempts to set the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for properties
                of keys in the model that don't have a strategy explicitly set.
            </summary>
            <param name="model"> The model. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlModelExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />.
            </summary>
            <param name="model"> The model. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />. </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for SQL Server-specific metadata.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                <para>
                    Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property.
                </para>
                <para>
                    If no strategy is set for the property, then the strategy to use will be taken from the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
                </para>
            </summary>
            <returns> The strategy, or <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.None"/> if none was set. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy})">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The strategy to use. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.IsCompatibleIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.IdentityColumn"/>.
            </summary>
            <param name="property"> The property. </param>
            <returns> <c>true</c> if compatible. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.IsCompatibleAutoIncrementColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.IdentityColumn"/>.
            </summary>
            <param name="property"> The property. </param>
            <returns> <c>true</c> if compatible. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.IsCompatibleCurrentTimestampColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.IdentityColumn"/>.
            </summary>
            <param name="property"> The property. </param>
            <returns> <c>true</c> if compatible. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.IsCompatibleComputedColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.ComputedColumn"/>.
            </summary>
            <param name="property"> The property. </param>
            <returns> <c>true</c> if compatible. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.GetCharSet(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
            Returns the name of the charset used by the column of the property.
            </summary>
            <param name="property">The property of which to get the columns charset from.</param>
            <returns>The name of the charset or null, if no explicit charset was set.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.SetCharSet(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
            Sets the name of the charset in use by the column of the property.
            </summary>
            <param name="property">The property to set the columns charset for.</param>
            <param name="charSet">The name of the charset used for the column of the property.</param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.GetCollation(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
            Returns the name of the collation used by the column of the property.
            </summary>
            <param name="property">The property of which to get the columns collation from.</param>
            <returns>The name of the collation or null, if no explicit collation was set.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.SetCollation(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
            Sets the name of the collation in use by the column of the property.
            </summary>
            <param name="property">The property to set the columns collation for.</param>
            <param name="collation">The name of the collation used for the column of the property.</param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.GetSpatialReferenceSystem(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
            Returns the Spatial Reference System Identifier (SRID) used by the column of the property.
            </summary>
            <param name="property">The property of which to get the columns SRID from.</param>
            <returns>The SRID or null, if no explicit SRID has been set.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Extensions.MySqlPropertyExtensions.SetSpatialReferenceSystem(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})">
            <summary>
            Sets the Spatial Reference System Identifier (SRID) in use by the column of the property.
            </summary>
            <param name="property">The property to set the columns SRID for.</param>
            <param name="srid">The SRID to configure for the property's column.</param>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.Info">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.Clone">
            <summary>
                Override this method in a derived class to ensure that any clone created is also of that class.
            </summary>
            <returns> A clone of this instance, which can be modified before being returned as immutable. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.WithJsonChangeTrackingOptions(Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions)">
            <summary>
                The change tracking option that will be used as the default for all JSON column mapped properties.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.WithJsonChangeTrackingOptions(Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.Info">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.ServerVersion">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.NullableCharSetBehavior">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.CharSet">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.NoBackslashEscapes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.UpdateSqlModeOnOpen">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithServerVersion(Pomelo.EntityFrameworkCore.MySql.Storage.ServerVersion)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithCharSetBehavior(Pomelo.EntityFrameworkCore.MySql.Infrastructure.CharSetBehavior)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithCharSet(Pomelo.EntityFrameworkCore.MySql.Storage.CharSet)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithDisabledBackslashEscaping">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithSettingSqlModeOnOpen">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Throw">
            <summary>
            Throw an exception if a schema is being used. Any specified translator delegate will be ignored.
            This is the default.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Ignore">
            <summary>
            Silently ignore any schema definitions. Any specified translator delegate will be ignored.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Translate">
            <summary>
            Use the specified translator delegate to translate from an input schema and object name to
            an output object name whenever a schema is being used.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.DecimalTypeDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ByteIdentityColumnWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.DefaultSchemaFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.TypeAliasFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ForeignKeyReferencesMissingPrincipalTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.MissingSchemaWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.SequenceFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean,System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlModelValidator">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlModelValidator.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies,Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlModelValidator.Validate(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings.JsonServicesMissing">
            <summary>
              Looks up a localized string similar to UseMicrosoftJson requires AddEntityFrameworkMySqlJson to be called on the internal service provider used..
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.IdentityBadType(System.Object,System.Object,System.Object)">
            <summary>
                Identity value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Identity value generation can only be used with integer, DateTime, and DateTimeOffset properties.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.UnqualifiedDataType(System.Object)">
            <summary>
                Data type '{dataType}' is not supported in this form. Either specify the length explicitly in the type name, for example as '{dataType}(16)', or remove the data type and use APIs such as HasMaxLength to allow EF choose the data type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.UnqualifiedDataTypeOnProperty(System.Object,System.Object)">
            <summary>
                Data type '{dataType}' for property '{property}' is not supported in this form. Either specify the length explicitly in the type name, for example as '{dataType}(16)', or remove the data type and use APIs such as HasMaxLength to allow EF choose the data type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.SequenceBadType(System.Object,System.Object,System.Object)">
            <summary>
                SQL Server sequences cannot be used to generate values for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Sequences can only be used with integer properties.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.IndexTableRequired">
            <summary>
                SQL Server requires the table name to be specified for rename index operations. Specify table name in the call to MigrationBuilder.RenameIndex.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.AlterMemoryOptimizedTable">
            <summary>
                To set memory-optimized on a table on or off the table needs to be dropped and recreated.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.AlterIdentityColumn">
            <summary>
                To change the IDENTITY property of a column, the column needs to be dropped and recreated.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.TransientExceptionDetected">
            <summary>
                An exception has been raised that is likely due to a transient failure. Consider enabling transient error resiliency by adding 'EnableRetryOnFailure()' to the 'UseMySql' call.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.NonKeyValueGeneration(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is configured to use 'SequenceHiLo' value generator, which is only intended for keys. If this was intentional configure an alternate key on the property, otherwise call 'ValueGeneratedNever' or configure store generation for this property.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.MultipleIdentityColumns(System.Object,System.Object)">
            <summary>
                The properties {properties} are configured to use 'Identity' value generator and are mapped to the same table '{table}'. Only one column per table can be configured as 'Identity'. Call 'ValueGeneratedNever' for properties that should not use 'Identity'.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.IncompatibleTableMemoryOptimizedMismatch(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and entity type '{memoryOptimizedEntityType}' is marked as memory-optimized, but entity type '{nonMemoryOptimizedEntityType}' is not.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.NoInitialCatalog">
            <summary>
                The database name could not be determined. To use EnsureDeleted, the connection string must specify Initial Catalog.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.DuplicateColumnNameValueGenerationStrategyMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different value generation strategies.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.InvalidTableToIncludeInScaffolding(System.Object)">
            <summary>
                The specified table '{table}' is not valid. Specify tables using the format '[schema].[table]'.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.FunctionOnClient(System.Object)">
            <summary>
                The '{methodName}' method is not supported because the query has switched to client-evaluation. Inspect the log to determine which query expressions are triggering client-evaluation.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.ComputedBadType(System.Object,System.Object,System.Object)">
            <summary>
                Computed value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Computed value generation can only be used with DateTime and DateTimeOffset properties.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.ExpressionTypeMismatch">
            <summary>
                The specified expression does not have the correct Type.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogDefaultDecimalTypeColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                No type was specified for the decimal column '{property}' on entity type '{entityType}'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'ForHasColumnType()'.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogByteIdentityColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The property '{property}' on entity type '{entityType}' is of type 'byte', but is set up to use a SQL Server identity column. This requires that values starting at 255 and counting down will be used for temporary key values. A temporary key value is needed for every entity inserted in a single call to 'SaveChanges'. Care must be taken that these values do not collide with real key values.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundDefaultSchema(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found default schema {defaultSchema}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundTypeAlias(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found type alias with name: {alias} which maps to underlying data type {dataType}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found column with table: {tableName}, column name: {columnName}, ordinal: {ordinal}, data type: {dataType}, maximum length: {maxLength}, precision: {precision}, scale: {scale}, nullable: {isNullable}, identity: {isIdentity}, default value: {defaultValue}, computed value: {computedValue}
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundForeignKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found foreign key on table: {tableName}, name: {foreignKeyName}, principal table: {principalTableName}, delete action: {deleteAction}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogPrincipalTableNotInSelectionSet(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogMissingSchema(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Unable to find a schema in the database matching the selected schema {schema}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogMissingTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Unable to find a table in the database matching the selected table {table}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundSequence(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found table with name: {name}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundIndex(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundPrimaryKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found primary key with name: {primaryKeyName}, table: {tableName}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundUniqueConstraint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found unique constraint with name: {uniqueConstraintName}, table: {tableName}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogPrincipalColumnNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                For foreign key {foreignKeyName} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention">
            <summary>
                A convention that configures store value generation as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd"/> on properties that are
                part of the primary key and not part of any foreign keys, were configured to have a database default value
                or were configured to use a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy"/>.
                It also configures properties as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate"/> if they were configured as computed columns.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention.ProcessPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on a property.
            </summary>
            <param name="propertyBuilder"> The builder for the property. </param>
            <param name="name"> The annotation name. </param>
            <param name="annotation"> The new annotation. </param>
            <param name="oldAnnotation"> The old annotation.  </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the store value generation strategy to set for the given property.
            </summary>
            <param name="property"> The property. </param>
            <returns> The store value generation strategy to set for the given property. </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationNames">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationNames.Prefix">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationNames.ValueGenerationStrategy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.ObjectToEnumConverter.GetEnumValue``1(System.Object)">
            <summary>
            Can be used to allow substitution of enum values with their underlying type in annotations, so that multi-provider models can
            be setup without provider specific dependencies.
            </summary>
            <remarks>
            See https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/1205 for further information.
            </remarks>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository.GetBeginIfNotExistsScript(System.String)">
            <summary>
                Overridden by database providers to generate a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier does not already exist in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository.GetBeginIfExistsScript(System.String)">
            <summary>
                Overridden by database providers to generate a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier already exists in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository.GetEndIfScript">
            <summary>
                Overridden by database providers to generate a SQL script to <c>END</c> the SQL block.
            </summary>
            <returns> The generated SQL. </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator">
            <summary>
                MySql-specific implementation of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator" />.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> by making calls on the given
                    <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    This method uses a double-dispatch mechanism to call one of the 'Generate' methods that are
                    specific to a certain subtype of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />. Typically database providers
                    will override these specific methods rather than this method. However, providers can override
                    this methods to handle provider-specific operations.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            /// <summary>
                Ignored, since schemas are not supported by MySQL and are silently ignored to improve testing compatibility.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Ignored, since schemas are not supported by MySQL and are silently ignored to improve testing compatibility.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.SequenceOptions(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment configuring a sequence with the given options.
            </summary>
            <param name="schema"> The schema that contains the sequence, or <c>null</c> to use the default schema. </param>
            <param name="name"> The sequence name. </param>
            <param name="operation"> The sequence options. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ColumnDefinition(Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition in an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition for the given column metadata.
            </summary>
            <param name="schema"> The schema that contains the table, or <c>null</c> to use the default schema. </param>
            <param name="table"> The table that contains the column. </param>
            <param name="name"> The column name. </param>
            <param name="operation"> The column metadata. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.CreateTablePrimaryKeyConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the primary key constraint of a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ForeignKeyConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a foreign key constraint of an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.IndexTraits(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for traits of an index from a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" />,
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" />, or <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <c>null</c> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ForeignKeyAction(Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the given referential action.
            </summary>
            <param name="referentialAction"> The referential action. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression">
            <summary>
                An expression that explicitly specifies the collation of a string value.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.ValueExpression">
            <summary>
                The expression for which a collation is being specified.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Charset">
            <summary>
                The character set that the string is being converted to.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Collation">
            <summary>
                The collation that the string is being converted to.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                Dispatches to the specific visit method for this node type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                Reduces the node and then calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" /> method passing the
                reduced expression.
                Throws an exception if the node isn't reducible.
            </summary>
            <param name="visitor"> An instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />. </param>
            <returns> The expression being visited, or an expression which should replace it in the tree. </returns>
            <remarks>
                Override this method to provide logic to walk the node's children.
                A typical implementation will call visitor.Visit on each of its
                children, and if any of them change, should return a new copy of
                itself with the modified children.
            </remarks>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Equals(System.Object)">
            <summary>
                Tests if this object is considered equal to another.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns>
                true if the objects are considered equal, false if they are not.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.GetHashCode">
            <summary>
                Returns a hash code for this object.
            </summary>
            <returns>
                A hash code for this object.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.ToString">
            <summary>
                Creates a <see cref="T:System.String" /> representation of the Expression.
            </summary>
            <returns>A <see cref="T:System.String" /> representation of the Expression.</returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.ArgumentParts">
            <summary>
                The arguments parts.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                Dispatches to the specific visit method for this node type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.GetHashCode">
            <summary>
                Returns a hash code for this object.
            </summary>
            <returns>
                A hash code for this object.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.ToString">
            <summary>
                Creates a <see cref="T:System.String" /> representation of the Expression.
            </summary>
            <returns>A <see cref="T:System.String" /> representation of the Expression.</returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonArrayIndexExpression">
            <summary>
            Represents a MySQL JSON array index (i.e. x[y]).
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression">
            <summary>
            Represents a MySQL JSON operator traversing a JSON document with a path (i.e. x->y or x->>y)
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression.Expression">
            <summary>
            The JSON column.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression.Path">
            <summary>
            The path inside the JSON column.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression.ReturnsText">
            <summary>
            Whether the text-returning operator (x->>y) or the object-returning operator (x->y) is used.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlConvertTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlConvertTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlDbFunctionsExtensionsMethodTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlDbFunctionsExtensionsMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlBoolOptimizingExpressionVisitor">
            <summary>
            "WHERE `boolColumn`" doesn't use available indices, while "WHERE `boolColumn` = TRUE" does.
            See https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/1104
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlBug96947WorkaroundExpressionVisitor">
             <summary>
             When using constant values in an LEFT JOIN, an later an ORDER BY is applied, MySQL 5.7+ will incorrectly return a NULL values for
             some columns.
             This is not an issue with any MariaDB release and not an issue with MySQL 5.6.
            
             See https://bugs.mysql.com/bug.php?id=96947
                 https://github.com/OData/WebApi/issues/2124
                 https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/1293
             </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies,Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlExpressionFactory,Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.IMySqlOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlSqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlCompiledQueryCacheKeyGenerator">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlCompiledQueryCacheKeyGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlCompiledQueryCacheKeyGenerator.GenerateCacheKey(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlDateDiffFunctionsTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMemberTranslatorPlugin">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMemberTranslatorPlugin.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.IMySqlOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMemberTranslatorPlugin.Translators">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMethodCallTranslatorPlugin">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> and multiple registrations
                    are allowed. This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMethodCallTranslatorPlugin.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMethodCallTranslatorPlugin.Translators">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlMathMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlObjectToStringTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerator.GenerateUseProvider(System.String,Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.ConvertDefaultValueFromMariaDbToMySql(System.String)">
            <summary>
            MariaDB 10.2.7+ implements default values differently from MySQL, to support their own default expression
            syntax. We convert their column values to MySQL compatible syntax here.
            See https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/994#issuecomment-568271740
            for tables with differences.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.GetPrimaryKeys(System.Data.Common.DbConnection,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable})">
            <remarks>
            Primary keys are handled as in <see cref="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.GetConstraints(System.Data.Common.DbConnection,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable})"/>, not here
            </remarks>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.GetIndexes(System.Data.Common.DbConnection,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable},System.Func{System.String,System.String,System.Boolean})">
            <remarks>
            Primary keys are handled as in <see cref="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.GetConstraints(System.Data.Common.DbConnection,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable})"/>, not here
            </remarks>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlRelationalConnection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlRelationalConnection.CreateMasterConnection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.#ctor(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.#ctor(System.Data.DbType,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies,Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlRelationalConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.RetryDelay">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.RetryTimeout">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.CreateAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.HasTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.Exists">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.Delete">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.#ctor(System.String,System.Nullable{System.Int32},System.Type,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.DateTime" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.#ctor(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.SqlLiteralFormatString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.RetriesOnFailure">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.Execute``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,``1},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.ExecuteAsync``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategyFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategyFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategyFactory.CreateDefaultStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.None">
            <summary>
            The default is to serialize everything, which is the most precise, but also the slowest.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareRootPropertyOnly">
            <summary>
            Do not track changes inside of JSON mapped properties but only for the root property itself.
            For example, if the JSON mapped property is a top level array of `int`, then changes to items of the
            array are not tracked, but changes to the array property itself (the reference) are.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareStringRootPropertyByEquals">
            <summary>
            Compare strings as is, without further processing. This means that adding whitespaces between inner
            properties of a JSON object, that have no effect at all to the JSON object itself, would lead to a change
            being discovered to the JSON object, resulting in the JSON mapped property being marked as modified.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareDomRootPropertyByEquals">
            <summary>
            Only check the JSON root property for DOM objects.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareDomSemantically">
            <summary>
            Traverse the DOM to check for changes.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.HashDomSemantially">
            <summary>
            Fully traverse the DOM to generate a hash.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.HashDomSemantiallyOptimized">
            <summary>
            Traverse part of the DOM to generate a hash.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.SnapshotCallsDeepClone">
            <summary>
            Call DeepClone() whenever a type, for which a snapshot needs to be generated, implements it.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.SnapshotCallsClone">
            <summary>
            Call Clone() whenever a type, for which a snapshot needs to be generated, implements it.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlLegacyJsonTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.JsonObject" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlLegacyJsonTypeMapping.#ctor(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlLegacyJsonTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlLegacyJsonTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlLegacyJsonTypeMapping.EscapeSqlLiteral(System.String)">
            <summary>
                Generates the escaped SQL representation of a literal value.
            </summary>
            <param name="literal">The value to be escaped.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlLegacyJsonTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlRelationalTransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
                Discards all changes made to the database in the current transaction.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.EscapeIdentifier(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.EscapeIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.String,System.String)">
            <summary>
                Generates the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="name">The identifier to delimit.</param>
            <param name="schema">The schema of the identifier.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Writes the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to write generated string to.</param>
            <param name="name">The identifier to delimit.</param>
            <param name="schema">The schema of the identifier.</param>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,MySql.Data.MySqlClient.MySqlDbType,Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.IMySqlOptions,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeSpanTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeSpanTypeMapping.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeSpanTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeSpanTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeSpanTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a non-null literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeSpanTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTransientExceptionDetector">
            <summary>
                Detects the exceptions caused by SQL Server transient failures.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTransientExceptionDetector.ShouldRetryOn(System.Exception)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping">
            <summary>
            The base class for mapping MySql-specific types. It configures parameters with the
            <see cref="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping.MySqlDbType"/> provider-specific type enum.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping.MySqlDbType">
            <summary>
            The database type used by MySql.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            Constructs an instance of the <see cref="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping"/> class.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <param name="mySqlDbType">The database type of the range subtype.</param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMappingSource.ValidateMapping(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.ServerVersion.GetSupport(System.String[])">
            <summary>
            Constructs a new <see cref="T:Pomelo.EntityFrameworkCore.MySql.Storage.ServerVersionSupport"/> object containing the <see cref="T:Pomelo.EntityFrameworkCore.MySql.Storage.ServerVersion"/> objects
            referenced by the provided version strings and/or support keys.
            </summary>
            <param name="supportKeysOrVersionStrings">A mix of server version strings and/or support keys.</param>
            <returns>Returns the constructed <see cref="T:Pomelo.EntityFrameworkCore.MySql.Storage.ServerVersionSupport"/> object.</returns>
            <remarks>Used by test attributes. Provider code should use the `Supports` instance methods instead.</remarks>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies,System.Nullable{System.Int32})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.UpdateSqlGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.CanAddCommand(Microsoft.EntityFrameworkCore.Update.ModificationCommand)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.IsCommandTextValid">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.GetParameterCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.ResetCommandText">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.GetCommandText">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.UpdateCachedCommandText(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatchFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatchFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlUpdateSqlGenerator">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlUpdateSqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlUpdateSqlGenerator.AppendBulkInsertOperation(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ModificationCommand},System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlSequentialGuidValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Gets a value to be assigned to a property.
                Creates a GUID where the first 8 bytes are the current UTC date/time (in ticks)
                and the rest are cryptographically random. This allows for better performance
                in clustered index scenarios.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlSequentialGuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns false, meaning the generated values will be saved to the database.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlValueGeneratorSelector">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlValueGeneratorSelector.Create(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId">
            <summary>
                <para>
                    Event IDs for MySql events that correspond to messages logged to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                    and events sent to a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
                <para>
                    These IDs are also used with <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" /> to configure the
                    behavior of warnings.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.DecimalTypeDefaultWarning">
            <summary>
                <para>
                    No explicit type for a decimal column.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ByteIdentityColumnWarning">
            <summary>
                <para>
                    A byte property is set up to use a MySql identity column.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ColumnFound">
            <summary>
                A column was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnFound">
            <summary>
                A column of a foreign key was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.DefaultSchemaFound">
            <summary>
                A default schema was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.TypeAliasFound">
            <summary>
                A type alias was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.MissingSchemaWarning">
            <summary>
                The database is missing a schema.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.MissingTableWarning">
            <summary>
                The database is missing a table.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.SequenceNotNamedWarning">
            <summary>
                The database has an unnamed sequence.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnsNotMappedWarning">
            <summary>
                Columns in an index were not mapped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyReferencesMissingPrincipalTableWarning">
            <summary>
                A foreign key references a missing table at the principal end.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnsNotMappedWarning">
            <summary>
                Columns in a foreign key were not mapped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyNotNamedWarning">
            <summary>
                A foreign key is not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnMissingWarning">
            <summary>
                A foreign key column was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnNotNamedWarning">
            <summary>
                A foreign key column was not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ColumnNotNamedWarning">
            <summary>
                A column is not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexNotNamedWarning">
            <summary>
                An index is not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexTableMissingWarning">
            <summary>
                The table referenced by an index was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnNotNamedWarning">
            <summary>
                An index column was not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.TableFound">
            <summary>
                A table was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.TableSkipped">
            <summary>
                A table was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ColumnSkipped">
            <summary>
                A column was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnFound">
            <summary>
                An index was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnSkipped">
            <summary>
                A column of an index was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.SequenceFound">
            <summary>
                A sequence was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyTableMissingWarning">
            <summary>
                A foreign key table was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.PrimaryKeyFound">
            <summary>
                Primary key was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.UniqueConstraintFound">
            <summary>
                An unique constraint was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexFound">
            <summary>
                An index was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyFound">
            <summary>
                A foreign key was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyPrincipalColumnMissingWarning">
            <summary>
                A principal column referenced by a foreign key was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ReflexiveConstraintIgnored">
            <summary>
                A reflexive foreign key constraint was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlDatabaseFacadeExtensions">
            <summary>
                MySQL specific extension methods for <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDatabaseFacadeExtensions.IsMySql(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                <para>
                    Returns true if the database provider currently in use is the MySQL provider.
                </para>
                <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
            </summary>
            <param name="database"> The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />. </param>
            <returns> True if MySQL is being used; false otherwise. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions">
            <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                The methods on this class are accessed via <see cref="P:Microsoft.EntityFrameworkCore.EF.Functions" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Like``1(Microsoft.EntityFrameworkCore.DbFunctions,``0,System.String)">
            <summary>
                <para>
                    An implementation of the SQL LIKE operation. On relational databases this is usually directly
                    translated to SQL.
                </para>
                <para>
                    Note that if this function is translated into SQL, then the semantics of the comparison will
                    depend on the database configuration. In particular, it may be either case-sensitive or
                    case-insensitive. If this function is evaluated on the client, then it will always use
                    a case-insensitive comparison.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="matchExpression">The property of entity that is to be matched.</param>
            <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
            <returns>true if there is a match.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Like``1(Microsoft.EntityFrameworkCore.DbFunctions,``0,System.String,System.String)">
            <summary>
                <para>
                    An implementation of the SQL LIKE operation. On relational databases this is usually directly
                    translated to SQL.
                </para>
                <para>
                    Note that if this function is translated into SQL, then the semantics of the comparison will
                    depend on the database configuration. In particular, it may be either case-sensitive or
                    case-insensitive. If this function is evaluated on the client, then it will always use
                    a case-insensitive comparison.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="matchExpression">The property of entity that is to be matched.</param>
            <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
            <param name="escapeCharacter">
                The escape character (as a single character string) to use in front of %,_,[,],^
                if they are not used as wildcards.
            </param>
            <returns>true if there is a match.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Match``1(Microsoft.EntityFrameworkCore.DbFunctions,``0,System.String,Microsoft.EntityFrameworkCore.MySqlMatchSearchMode)">
            <summary>
                <para>
                    An implementation of the SQL MATCH operation for Full Text search.
                </para>
                <para>
                    The semantics of the comparison will depend on the database configuration.
                    In particular, it may be either case-sensitive or
                    case-insensitive.
                </para>
                <para>
                    Should be directly translated to SQL.
                    This function can't be evaluated on the client.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="matchExpression">The property of entity that is to be matched.</param>
            <param name="pattern">The pattern against which Full Text search is performed</param>
            <param name="searchMode">Mode in which search is performed</param>
            <returns>true if there is a match.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when query switched to client-evaluation.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Hex``1(Microsoft.EntityFrameworkCore.DbFunctions,``0)">
             <summary>
                 <para>
                     For a string argument `value`, Hex() returns a hexadecimal string representation of `value` where
                     each byte of each character in `value` is converted to two hexadecimal digits.
                 </para>
                 <para>
                     For a numeric argument `value`, Hex() returns a hexadecimal string representation of `value`
                     treated as a `Int64` (BIGINT) number.
                 </para>
                 <para>
            
                 </para>
             </summary>
             <param name="_">The DbFunctions instance.</param>
             <param name="value">The string or number to convert to a hexadecimal string.</param>
             <returns>The hexadecimal string or `null`.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Unhex(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
            For a string argument `value`, Unhex() interprets each pair of characters in the argument as a hexadecimal
            number and converts it to the byte represented by the number.
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="value">The hexadecimal string to convert to a character string.</param>
            <returns>The string or `null`.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions">
            <summary>
                MySQL specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.IsFullText(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)">
            <summary>
            Sets a value indicating whether the index is full text.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="fullText"> The value to set. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.IsSpatial(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)">
            <summary>
            Sets a value indicating whether the index is spartial.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="spatial"> The value to set. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.HasPrefixLength(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Int32[])">
            <summary>
            Sets prefix lengths for the index.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="prefixLengths">The prefix lengths to set, in the order the index columns where specified.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions">
            <summary>
            Provides methods for supporting translation to MySQL JSON operators and functions.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.AsJson(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
            Explicitly converts <paramref name="value"/> to JSON.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="value">
            The string to convert to JSON.
            </param>
            <returns> The JSON value. </returns>
            <remarks>
            Translates <paramref name="value"/> to `CAST(value as json)` where appropriate on server implementations
            that support the `json` store type.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonType(Microsoft.EntityFrameworkCore.DbFunctions,System.Object)">
            <summary>
            Returns the type of the outermost JSON value as a text string.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <returns> The JSON type as a text string. </returns>
            <remarks> For possible return values see: https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html#function_json-type </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonQuote(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
            Quotes a string as a JSON value by wrapping it with double quote characters and escaping interior quote and
            other characters, then returning the result as a `utf8mb4` string. Returns `null` if the argument is `null`.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="value">
            The string value.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonUnquote(Microsoft.EntityFrameworkCore.DbFunctions,System.Object)">
            <summary>
            Unquotes JSON value and returns the result as a `utf8mb4` string. Returns `null` if the argument is `null`.
            An error occurs if the value starts and ends with double quotes but is not a valid JSON string literal.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonExtract``1(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String[])">
            <summary>
            Returns data from a JSON document, selected from the parts of the document matched by the path arguments.
            Returns `null` if any argument is `null` or no paths locate a value in the document. An error occurs if the
            `json` argument is not a valid JSON document or any path argument is not a valid path expression.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="paths">
            A set of paths to extract from <paramref name="json"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContains(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.Object)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="candidate"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="candidate">
            A JSON column or value. Can be a JSON DOM object, a string, or a user POCO mapped to JSON.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContains(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.Object,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="candidate"/> at a specific <paramref name="path"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="candidate">
            A JSON column or value. Can be a JSON DOM object, a string, or a user POCO mapped to JSON.
            </param>
            <param name="path">
            A string containing a valid JSON path (staring with `$`).
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContainsPath(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String)">
            <summary>
            Checks if <paramref name="path"/> exists within <paramref name="json"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="path">A path to be checked inside <paramref name="json"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContainsPathAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String[])">
            <summary>
            Checks if any of the given <paramref name="paths"/> exist within <paramref name="json"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="paths">A set of paths to be checked inside <paramref name="json"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContainsPathAll(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String[])">
            <summary>
            Checks if all of the given <paramref name="paths"/> exist within <paramref name="json"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="paths">A set of paths to be checked inside <paramref name="json"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonSearchAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="searchString"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="searchString">
            The string to search for.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonSearchAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="searchString"/> under <paramref name="path"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="searchString">
            The string to search for.
            </param>
            <param name="path">
            A string containing a valid JSON path (staring with `$`).
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonSearchAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String,System.String,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="searchString"/> under <paramref name="path"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="searchString">
            The string to search for.
            </param>
            <param name="path">
            A string containing a valid JSON path (staring with `$`).
            </param>
            <param name="escapeChar">
            Can be `null`, an empty string or a one character wide string used for escaping characters in <paramref name="searchString"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlKeyBuilderExtensions.HasPrefixLength(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.Int32[])">
            <summary>
            Sets prefix lengths for the key.
            </summary>
            <param name="keyBuilder"> The key builder. </param>
            <param name="prefixLengths">The prefix lengths to set, in the order the key columns where specified.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <returns> The key builder. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions">
            <summary>
                MySQL specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                Configures the key property to use the MySQL IDENTITY feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
                Configures the key property to use the MySQL IDENTITY feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                Configures the key property to use the MySQL Computed feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate" />.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlComputedColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
                Configures the key property to use the MySQL Computed feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate" />.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
            Configures the charset for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="charSet">The name of the charset to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,Pomelo.EntityFrameworkCore.MySql.Storage.CharSet)">
            <summary>
            Configures the charset for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="charSet">The <see cref="T:Pomelo.EntityFrameworkCore.MySql.Storage.CharSet"/> to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
            Configures the collation for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="collation">The name of the collation to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasSpatialReferenceSystem(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Nullable{System.Int32})">
            <summary>
            Restricts the Spatial Reference System Identifier (SRID) for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.ServerVersion(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)">
            <summary>
                Configures the target server version and type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.ServerVersion(System.String)">
            <summary>
                Configures the target server version and type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.ServerVersion(Pomelo.EntityFrameworkCore.MySql.Storage.ServerVersion)">
            <summary>
                Configures the target <see cref="T:Pomelo.EntityFrameworkCore.MySql.Storage.ServerVersion"/>.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.CharSetBehavior(Pomelo.EntityFrameworkCore.MySql.Infrastructure.CharSetBehavior)">
            <summary>
                Configures the Default CharSet Behavior
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.CharSet(Pomelo.EntityFrameworkCore.MySql.Storage.CharSet)">
            <summary>
                Configures the ANSI CharSet
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableRetryOnFailure">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32)">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
            <param name="errorNumbersToAdd"> Additional error codes that should be considered transient. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.DisableBackslashEscaping(System.Boolean)">
            <summary>
                Configures string escaping in SQL query generation to ignore backslashes, and assumes
                that `sql_mode` has been set to `NO_BACKSLASH_ESCAPES`.
                This applies to both constant and parameter values (i. e. user input, potentially).
            </summary>
            <param name="setSqlModeOnOpen">When `true`, enables the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SetSqlModeOnOpen" /> option,
            which sets `sql_mode` to `NO_BACKSLASH_ESCAPES` automatically, when a connection has been
            opened. This is the default.
            When `false`, does not change the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SetSqlModeOnOpen" /> option, when calling this method.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SetSqlModeOnOpen">
            <summary>
                When `true`, implicitly executes a `SET SESSION sql_mode` statement after opening
                a connection to the database server, adding the modes enabled by other options.
                When `false`, the `sql_mode` is not being set by the provider and has to be manually
                handled by the caller, to synchronize it with other options that have been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.DisableLineBreakToCharSubstition">
            <summary>
                Skip replacing `\r` and `\n` with `CHAR()` calls in strings inside queries.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.DefaultDataTypeMappings(System.Func{Pomelo.EntityFrameworkCore.MySql.Internal.MySqlDefaultDataTypeMappings,Pomelo.EntityFrameworkCore.MySql.Internal.MySqlDefaultDataTypeMappings})">
            <summary>
                Configures default mappings between specific CLR and MySQL types.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SchemaBehavior(Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior,Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaNameTranslator)">
            <summary>
                Configures the behavior for cases when a schema has been set for an entity. Because
                MySQL does not support the EF Core concept of schemas, the default is to throw an
                exception.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableIndexOptimizedBooleanColumns(System.Boolean)">
            <summary>
                Configures the context to optimize `System.Boolean` mapped columns for index usage,
                by translating `e.BoolColumn` to `BoolColumn = TRUE` and `!e.BoolColumn` to `BoolColumn = FALSE`.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder.CreateConventionSet">
            <summary>
                Builds and returns the convention set for the current database provider.
            </summary>
            <returns> The convention set for the current database provider. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder.Build">
            <summary>
                <para>
                    Call this method to build a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" /> for SQL Server when using
                    the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> outside of <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
                </para>
                <para>
                    Note that it is unusual to use this method.
                    Consider using <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in the normal way instead.
                </para>
            </summary>
            <returns> The convention set. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation">
            <summary>
                A MySql Server-specific <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to create a database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation.Name">
            <summary>
                The name of the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation">
            <summary>
                A MySql Server-specific <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to drop a database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation.Name">
            <summary>
                The name of the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="context"> The context on which the operations will be invoked. </param>
            <remarks>
                The default retry limit is 6, which means that the total amount of time spent before failing is about a minute.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="dependencies"> Parameter object containing service dependencies. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="context"> The context on which the operations will be invoked. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="dependencies"> Parameter object containing service dependencies. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="context"> The context on which the operations will be invoked. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
            <param name="errorNumbersToAdd"> Additional SQL error numbers that should be considered transient. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="dependencies"> Parameter object containing service dependencies. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
            <param name="errorNumbersToAdd"> Additional SQL error numbers that should be considered transient. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions">
            <summary>
            Represents the most common JSON change tracking options. Set options either globally with the
            `UseJsonChangeTrackingOptions` extension method when calling `MySqlDbContextOptionsBuilder.UseMicrosoftJson()`
            or `MySqlDbContextOptionsBuilder.UseNewtonsoftJson()`, or for a specific model property when calling
            `PropertyBuilder.UseJsonChangeTrackingOptions()`.
            The default is `RootPropertyOnly`, resulting in the best performance but only limited change tracking support.
            Comparisons will use appropriate `Equals()` methods (including `IEquatable&lt;T&gt;` implementations) or overloaded
            `==` operators.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.RootPropertyOnly">
            <summary>
            Do not track changes inside of JSON column mapped properties but only for the root property itself.
            For example, if the JSON mapped property is a top level array of `int`, then changes to items of the
            array are not tracked, but changes to the array property itself (the reference) are.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.FullHierarchyOptimizedFast">
            <summary>
            Track all changes in the JSON column mapped property (DOM, POCOs and `string`). This is the fasted option
            with full change tracking support and should be used in most cases where full change tracking support is
            required.
            If the JSON column mapped property implements a `Clone()` or `DeepClone()` method, it is called in snapshot
            generation and assumed to clone the full hierarchy.
            If the JSON column mapped property implements an `Equals(T, T)` method (e.g. for `IEquatable&lt;T&gt;`
            implementations) or overloads the `==` operator, it is being call for equivalence checks for the whole
            hierarchy.
            In case the JSON column mapped property is represented by a JSON DOM object, only its root reference will
            be checked. While this works well for `System.Text.Json`, you should consider the
            `FullHierarchyOptimizedSemantically` option for cases where you are using `Newtonsof.Json`.
            In rare cases, false positives can occur, that will lead to a modified state even if the property is
            semantically equivalent to its original value (e.g. when adding whitespace characters between inner
            properties).
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.FullHierarchyOptimizedSemantically">
            <summary>
            Track all changes in the JSON column mapped property (DOM, POCOs and `string`). This is a medium fast option
            with full change tracking support and should be used only in cases, when the JSON column mapped property is
            represented by a JSON DOM object and change tracking should check for semantic equivalence. For other cases,
            consider the `FullHierarchyOptimizedFast` option instead.
            If the JSON column mapped property implements a `Clone()` or `DeepClone()` method, it is called in snapshot
            generation and assumed to clone the full hierarchy.
            If the JSON column mapped property implements an `Equals(T, T)` method (e.g. for `IEquatable&lt;T&gt;`
            implementations) or overloads the `==` operator, it is being call for equivalence checks for the whole
            hierarchy.
            This option is most usefull when using `Newtonsof.Json`. If instead `System.Text.Json` is being used,
            consider the `FullHierarchyOptimizedFast` option instead for common cases, unless you explicitly require
            semantic equivalence checks.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.FullHierarchySemantically">
            <summary>
            Track all changes in the JSON column mapped property (DOM, POCOs and `string`). This is the slowest option
            with full change tracking support and should be used only in cases when full semantic equivalence is
            required, because of its high performance impact. This option does not result in false positives (e.g. when
            adding whitespace characters between inner properties).
            Every change tracking comparison is being done by processing the JSON column mapped property by the JSON
            serializer and comparing the result with the original value, that already has been processed in the same
            fashion.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlJsonString">
            <summary>
            This class can be used to represent a string that contains valid JSON data. When used in database queries
            against server implementations that support the `JSON` store type, a `CAST(mySqlJsonString as json)` clause will
            be generated where necessary.
            To mark a string as containing JSON data, just cast the string to `MySqlJsonString`.
            </summary>
        </member>
        <member name="T:System.Data.Common.DbDataReaderExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:System.Data.Common.DbDataReaderExtensions.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitNotNullAttribute">
            <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
    </members>
</doc>
